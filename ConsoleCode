using System;
using System.Threading;

namespace ThreadTest
{

    //Thread类的构造函数有2类
    //1.不带参数(ThreadStart委托) public Thread（ThreadStart start)
    //2.带参数（ParametefizedThreadStart委托）  public Thread(ParameterizedThreadStart start)
    //Thread对象的Start()方法，创建线程。Start()方法后，新线程仍不是Running状态，而是出于Unstarted状态。
    //只要操作系统的线程调度器选择了要运行的线程，线程就会改为Running状态
    //线程池，双核CPU中，默认设置为1023个工作线程和1000个I/O线程

    class Program
    {
        //定义线程方法
        private static void ThreadMain()
        {
            Console.WriteLine("This is other thread main method.");
        }


        private static void MainThreadWithParameters(Object o)
        {
            Data d = (Data)o;
            Console.WriteLine("Running in a thread,reveived {0}", d.Message);
        }

        public struct Data
        {
            public string Message;
        }

        static void Main(string[] args)
        {
            #region  调用线程  不带参数
            //Thread myThread = new Thread(ThreadMain);等价于：
            Thread myThread = new Thread(() =>
              {
                  Console.WriteLine("This is other thread main method.");
              });
            myThread.Start();

            //Thread类创建的线程为前台线程，线程池中的线程为后台线程
            var test = myThread.IsBackground;//false   
            if (!test)
            {
                Console.WriteLine("false");
            }
            #endregion

            #region 调用线程，带参数
            var data = new Data { Message = "Info" };
            Thread t2 = new Thread(MainThreadWithParameters);
            t2.Start(data);//传递参数
            #endregion

            Console.ReadKey();
        }

    }
}
