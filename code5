using System.Threading;
using static System.Console;

namespace OperateAutomicInThread
{
    abstract class CounterBase
    {
        public abstract void Increment();//递增

        public abstract void Decrement();//递减
    }

    class Counter : CounterBase
    {
        private int count;

        public int Count => count;

        public override void Increment()
        {
            count++;
        }

        public override void Decrement()
        {
            count--;
        }
    }

    //Interlocked 构造，在对数字的操作上实现了线程安全
    class CounterNoLock : CounterBase
    {
        private int count;

        public int Count => count;

        public override void Increment()
        {
            Interlocked.Increment(ref count);//Interlocked
        }

        public override void Decrement()
        {
            Interlocked.Decrement(ref count);
        }
    }

    class Program
    {
        static void TestCounter(CounterBase c)
        {
            for (int i = 0; i < 100000; i++)
            {
                c.Increment();
                c.Decrement();
            }
        }

        static void Main(string[] args)
        {
            WriteLine("Incorrect counter");

            var c1 = new Counter();//Counter不是线程安全的类，多运行几次，c1的结果多数不是0

            var t1 = new Thread(() => TestCounter(c1));
            var t2 = new Thread(() => TestCounter(c1));
            var t3 = new Thread(() => TestCounter(c1));
            t1.Start();
            t2.Start();
            t3.Start();
            t1.Join();
            t2.Join();
            t3.Join();//线程等待，t1,t2,t3执行完后才会执行主线程（下面的代码）

            WriteLine($"Total count: {c1.Count}");
            WriteLine("--------------------------");

            WriteLine("Correct counter");

            var c2 = new CounterNoLock();//CounterNoLock使用Interlocked，是线程安全的类，c2的结果一直是0

            t1 = new Thread(() => TestCounter(c2));
            t2 = new Thread(() => TestCounter(c2));
            t3 = new Thread(() => TestCounter(c2));
            t1.Start();
            t2.Start();
            t3.Start();
            t1.Join();
            t2.Join();
            t3.Join();

            WriteLine($"Total count: {c2.Count}");

            ReadKey();
        }
    }
}
